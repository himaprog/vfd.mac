; VFD.MAC  ver1.1.2
;
; Copyright(c) 2021 himaprog
;
; Released under the MIT license
; https://github.com/himaprog/vfd.mac/blob/main/LICENSE
;

; Source description
; ----------
;
; This is a macro file for NASM to make it easier to create a virtual FD image.
;
;
; Specifying a value
; ----------
;
; Specify values for these macros to define them. Please use it if necessary.
;
; VFD_DISKSIZE:
; Specifies the size of the disk. It's 1440 or 720. (default = 1440)
;
; VFD_DISKLABEL_OEM:
; Specify the OEM label name of the disk using 8 single-byte characters or less. (default = "NO NAME")
;
; VFD_DISKLABEL_VOL:
; Specify the volume label name of the disk using 11 single-byte characters or less. (default = "NO LABEL")
;
; VFD_DISKDATE:
; Specify the date the disk was created as a decimal or hexadecimal number. (default = 0, same as 1980/1/1.)
; If you want to specify the correct value, follow the floppy disk recording format.
;
; VFD_DISKTIME:
; Specify the time the disk was created as a decimal or hexadecimal number. (default = 0, same as 00:00:00.)
; If you want to specify the correct value, follow the floppy disk recording format.
;
; VFD_DISKID:
; Specify the volume serial number of the disk as a decimal or hexadecimal number. (default = 0, same as 0xFFFFFFFF.)
;
;
; Macro related to FD image configuration
; ----------
;
; Use these macros to indicate the configuration of your own virtual FD image.
;
; VFD_DISKINFO:
; Disk information for the Master Boot Record.
;
; VFD_FAT_TERM:
; VFD_ROOT_TERM:
; VFD_DATAAREA_TERM:
; Each of these macros marks the end of the corresponding disk space. Please use it if necessary.
; Please note that the placement of macros in the code is directly reflected in the FD image you create.
; When using these macros, specify the number of bytes of self-made data in the disk area as an argument. If not specified, it is the same as specifying the maximum size required for the area without self-made data.
; The VFD_DATAAREA_TERM macro can also specify the data to be written as a decimal value from 0 to 255 or a 1-byte hexadecimal value as the second argument. If specified, the remaining area after the self-made data will be filled with the specified value. (Default = 0xF6, same as standard DOS format)
; However, each of these macros cannot be explicitly used in your own code along with the VFD_BLANK_xx macros in the associated disk space.
;
; VFD_BLANK_FAT:
; VFD_BLANK_ROOT:
; VFD_BLANK_DATAAREA:
; Each of these macros indicates that the entire corresponding area is empty. Please use it if necessary.
; Please note that the placement of macros in the code is directly reflected in the FD image you create.
; However, each of these macros contains a VFD_xx_TERM macro for the associated disk space, so you cannot explicitly use them together in your code.
; The VFD_ROOT_VLABEL macro is included in the VFD_BLANK_ROOT macro, so there is no need to prepare it separately.
;
; VFD_BLANK_DISK:
; Indicates that the non-MBR area of the disk is empty. Please use it if necessary.
; Using this macro is the same as using all other VFD_BLANK_xx macros together. Therefore, it cannot be used explicitly with these macros in your code.
;
; VFD_ROOT_VLABEL:
; Indicates the volume label information in the FAT area of the disk. Please use it if necessary.
; If you create your own FAT data, be sure to place it at the beginning of the area.
; This macro cannot be used with the VFD_BLANK_ROOT macro.
;
; VFD_IPL_ORG:
; Indicates the memory address where the IPL code will be placed at run time.
; This value is set automatically depending on whether the DEBUG macro is defined.
;
; VFD_IPL_BEGIN:
; VFD_IPL_END:
; Indicates the start and end of the IPL code placed in the MBR area. Write the IPL code between these macros, including the data you want to use.
; By using these macros, you can focus on coding the IPL without having to write the rest of the MBR, and you can check if the IPL code fits in the MBR size.
; Note that the VFD_DISKINFO macro is included in these macros and does not need to be prepared separately.
;
; VFD_MBR_HEAD: (label name)
; Indicates the start position of the MBR area. Use it as needed, such as when acquiring a memory address while the program is running.
; This is usually the same value as the VFD_IPL_ORG macro.
;
; VFD_MBR_ORG:
; VFD_MBR_BEGIN:
; VFD_MBR_END:
; MBR: (label name)
; It is left for compatibility with older code. It may be deleted in the future.
;
;



%ifndef VFD_DISKSIZE
%define VFD_DISKSIZE 1440
;%warning Since the VFD_DISKSIZE macro is undefined, it is assumed that 1440 is specified as the value.
%endif

%if VFD_DISKSIZE != 1440 && VFD_DISKSIZE != 720
%error The macro 'VFD_DISKSIZE' must be defined as 1440 or 720.
%endif

%ifstr VFD_DISKLABEL_OEM
%strlen vfd_tmpvar VFD_DISKLABEL_OEM
%if vfd_tmpvar > 8
%error The length of the string defined by the VFD_DISKLABEL_OEM macro exceeds 8 bytes.
%endif
%else
%define VFD_DISKLABEL_OEM "NO NAME"
%endif

%ifstr VFD_DISKLABEL_VOL
%strlen vfd_tmpvar VFD_DISKLABEL_VOL
%if vfd_tmpvar > 11
%error The length of the string defined by the VFD_DISKLABEL_VOL macro exceeds 11 bytes.
%endif
%else
%define VFD_DISKLABEL_VOL "NO LABEL"
%endif



%undef VFD_ROOT_VLABEL
%macro VFD_ROOT_VLABEL 0
    ;section .data
	db VFD_DISKLABEL_VOL    ; Volume label (11bytes long)
%strlen vfd_tmpvar VFD_DISKLABEL_VOL
	times 11-vfd_tmpvar db 0x20
	db 0x28                 ; Attributes
	db 0                    ; SFN lower-case flag (Must be 0.)
	db 0                    ; Crt time sub-second (Not suppot, must be 0.)
	dw 0                    ; Crt time (Not suppot, must be 0.)
	dw 0                    ; Crt date (Not suppot, must be 0.)
	dw 0                    ; Last access date (Not suppot, must be 0.)
	dw 0                    ; First-cluster high (Must be 0.)
%ifnum VFD_DISKTIME < 0xFFFF    ; Write time
	dw VFD_DISKTIME
%else
	dw 0
%endif
%ifnum VFD_DISKDATE < 0xFFFF    ; Write date
	dw VFD_DISKDATE
%else
	dw 0
%endif
	dw 0                    ; First-cluster low (Must be 0.)
	dd 0                    ; File size (Must be 0.)
%endmacro

%undef VFD_DISKINFO
%macro VFD_DISKINFO 0
    ;section .data
	db VFD_DISKLABEL_OEM    ; OEM String (8bytes long)
%strlen vfd_tmpvar VFD_DISKLABEL_OEM
	times 8-vfd_tmpvar db 0x20
	dw 512                  ; Bytes per sector (8bytes long)
%if VFD_DISKSIZE == 1440
	db 1                    ; Sectors per cluster
	dw 1                    ; FAT start sector
	db 2                    ; Number of FATs
	dw 224                  ; Root entries
	dw 2880                 ; Small sectors
	db 0xF0                 ; Media type (hex)
	dw 9                    ; Sectors per FAT
	dw 18                   ; Sectors per track
%else
	db 2                    ; Sectors per cluster
	dw 1                    ; FAT start sector
	db 2                    ; Number of FATs
	dw 112                  ; Root entries
	dw 1440                 ; Small sectors
	db 0xF9                 ; Media type (hex)
	dw 3                    ; Sectors per FAT
	dw 9                    ; Sectors per track
%endif
	dw 2                    ; Heads
	dd 0                    ; Hidden sectors (partitions?)
	dd 0                    ; Large sectors
	dw 0                    ; Drive (hex) (physical drives)
	db 0x29                 ; Signature (of ext boot record)
%ifnum VFD_DISKID < 0xFFFFFFFF  ; Volume ID
	dd VFD_DISKID
%else
	dd -1
%endif
	db VFD_DISKLABEL_VOL    ; Volume label (11bytes long)
%strlen vfd_tmpvar VFD_DISKLABEL_VOL
	times 11-vfd_tmpvar db 0x20
	db "FAT12   "           ; System string (8bytes long)
%endmacro

%undef VFD_FAT_TERM
%macro VFD_FAT_TERM 0-1 0
    ;section .data
%if VFD_DISKSIZE == 1440
%define vfd_tmpvar 0x1200
%else
%define vfd_tmpvar 0x600
%endif
%ifnum %1 <= vfd_tmpvar
	times vfd_tmpvar-%1 db 0
%else
%error The argument of the VFD_FAT_TERM macro is invalid.
%endif
%endmacro

%undef VFD_ROOT_TERM
%macro VFD_ROOT_TERM 0-1 0
    ;section .data
%if VFD_DISKSIZE == 1440
%define vfd_tmpvar 0x1C00
%else
%define vfd_tmpvar 0xE00
%endif
%ifnum %1 <= vfd_tmpvar
	times vfd_tmpvar-%1 db 0
%else
%error The argument of the VFD_ROOT_TERM macro is invalid.
%endif
%endmacro

%undef VFD_DATAAREA_TERM
%macro VFD_DATAAREA_TERM 0-2 0, 0xF6
    ;section .data
%if VFD_DISKSIZE == 1440
%define vfd_tmpvar 0x163E00
%else
%define vfd_tmpvar 0xB2400
%endif
%ifnum %1 <= vfd_tmpvar
%ifnum %2 <= 0xFF
%define vfd_tmpvar2 %2
%else
%error The second argument of the VFD_DATAAREA_TERM macro is invalid.
%endif
	times vfd_tmpvar-%1 db vfd_tmpvar2
%else
%error The first argument of the VFD_DATAAREA_TERM macro is invalid.
%endif
%endmacro

%undef VFD_BLANK_FAT
%macro VFD_BLANK_FAT 0
    ;section .data
%rep 2
%if VFD_DISKSIZE == 1440
	db 0xF0, 0xFF, 0xFF
%else
	db 0xF9, 0xFF, 0xFF
%endif
	VFD_FAT_TERM 3
%endrep
%endmacro

%undef VFD_BLANK_ROOT
%macro VFD_BLANK_ROOT 0
    ;section .data
	VFD_ROOT_VLABEL
	VFD_ROOT_TERM 32        ; arg == sizeof VFD_ROOT_VLABEL
%endmacro

%undef VFD_BLANK_DATAAREA
%macro VFD_BLANK_DATAAREA 0
    ;section .data
	VFD_DATAAREA_TERM
%endmacro

%undef VFD_BLANK_DISK
%macro VFD_BLANK_DISK 0
	VFD_BLANK_FAT
	VFD_BLANK_ROOT
	VFD_BLANK_DATAAREA
%endmacro

%undef vfd_tmpvar



%ifndef DEBUG
%define VFD_IPL_ORG 0x7C00
%else
%define VFD_IPL_ORG 0x100
%endif

%undef VFD_IPL_BEGIN
%macro VFD_IPL_BEGIN 0
    org VFD_IPL_ORG

    ;section .code
    cpu 8086
    VFD_MBR_HEAD:
	jmp short ..@IplEntry
	nop

    ..@DiskInfo:
	VFD_DISKINFO

    ;section .code
    ..@IplEntry:
%endmacro

%undef VFD_IPL_END
%macro VFD_IPL_END 0
    ;section .data
	times 1FEh-($-$$) db 0
	db 0x55, 0xAA
%endmacro

%define MBR           VFD_MBR_HEAD
%define VFD_MBR_BEGIN VFD_IPL_BEGIN
%define VFD_MBR_END   VFD_IPL_END
%define VFD_MBR_ORG   VFD_IPL_ORG
